main.py:

1. Tables are being created properly ✔
2. Table creation statements are not executed if table exists ✔
3. adminID successfully fetched from LogIn_Window if logs in, else program exits with code 0 ✔
4. mainGameV3.py is run with language if selected, or file name if selected, or program exits with code 0 ✔

LogIn_Window.py:

1. Username for creation matches length requirement & informs user of failure to meet requirement ✔
2. Username for creation matches alphabetical/alphanumerical requirement & informs of failure to meet requirement ✔
3. Password for creation matches length requirement & informs user of failure to meet requirement ✔
4. Show Password button works ✔
5. Admin profile creation works & user is informed of successful creation ✔
6. Admin profile creation handles attempted creation with duplicate usernames and informs of error ✔
7. Admin profile creation handles missing values for username/password ✔
8. User informed of incorrect details for admin profile login ✔
9. User logs in successfully if correct details provided ✔
10. adminID successfully retrieved after admin profile login ✔
11. User creation fails when requirements are not met ✔
12. Login fails when requirements are not met ✔

HomeScreen_Window.py:

1. Player names retrievable from text entry boxes & updated into variable upon clicking "Enter" ✔
2. Language retrievable from dropdown menu & updated into variable upon clicking "Select" ✔
3. User informed of missing username ✔
4. In case "Select" isn't clicked for language, default language is used (English) & updated into variable ✔
5. User informed of username repetition ✔
6. Game window launches after "start new game" button is clicked ✔
7. Game filename retrievable from dropdown menu and updated into variable ✔
8. Default game filename value is retrieved if the user doesn't go through dropdown menu & selects a name ✔
9. Game window launches after "load game" button is clicked ✔
10. "View Rules" button opens the rules window if it doesn't exist, or focuses it if it does ✔
11. Ensure that EITHER filename is updated OR player names and language is updated ✔
12. Verify window is closed properly ✔
13. Ensure a new game cannot start without player names and a language ✔
14. In case the dropdown menu for file names isn't interacted with, the initial file is used when loading a game ✔

ViewRules_Window.py:

1. Window opens after button click ✔
2. Only one instance of the window opens ✔
3. Window opens each of the selections ✔
4. Open button will open the default value in the dropdown menu, even if the menu hasn't been interacted with ✔
5. After closing, window can be re-opened ✔
6. After closing, only one instance of the window can be opened ✔
7. Clicking the "view rules" button will focus the view rules window if it is already open ✔

mainGameV4.py:

1. Check if objects are created and updated properly when starting a new game: empty game board (except for premium squares), full tile bag, empty player racks
2. Check if objects are created and updated properly when loading a game from a file
3. Check if Square objects are being created properly for the premium squares on the scrabble board
4. Check if correct player IDs are fetched
5. Check if correct game ID is fetched when loading a game
6. Check if player order is determined correctly
7. Check player information is swapped properly if the player order swaps
8. Check that tile bag is shuffled properly
9. Check that player racks are filled properly
10. Check that a game record is properly created when starting a new game
11. Check that the correct game ID is fetched when starting a new game
12. Check if the user is able to select the correct tile from their rack
13. Check if the user is able to place the correct tile in their chosen position on the board
14. Check if the user is able to exchange a tile properly
15. Check if tournament rules for exchanging tiles are followed (or emulated)
16. Check if a Tile object representing a blank tile represents the letter designation correctly
17. Check if a player is able to recall their tiles correctly
18. Check if the merge sort function works as intended
19. Ensure the CheckIfSublist function works as intended
20. Check if tile placement is checked and validated properly to determine a valid play
21. Check if words are correctly fetched when scanning the board
21. Check if the CheckWords function correctly determines if a word is in the word list
22. Check if only newly created words are being used to calculate the score to award
23. Check if the score is calculated properly (after accounting for blanks and premium square multipliers)
24. Check if the player's move (tile placement, exchange, pass) is recorded properly to the database
25. Check if scores are updated properly after a game is finished, including "score stealing" and penalties
26. Check if the file name to save a game to is correctly retrieved, and meets the length requirement
27. Check if the administrator password entered to close the window is correctly matched with the database
28. Check if the NASPA rules are followed/emulated properly
29. Check if the game is saved properly, by holding all the details of the game board, tile bag, players, and game
30. Check if the program properly closes after the game window is closed
